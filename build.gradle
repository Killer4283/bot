/*
 * Copyright (C) 2016-2018 David Alejandro Rubio Escares / Kodehawa
 *
 * Mantaro is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * Mantaro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Mantaro.  If not, see http://www.gnu.org/licenses/
 */

/* Mantaro's build.gradle */
//Imports
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.apollographql.apollo:apollo-gradle-plugin:0.4.4'
    }
}

//Plugins
plugins {
	//Compiles Java
	id 'java'
	//Adds an Executable Manifest
	id 'application'
	//Creates FatJars
	id 'com.github.johnrengelman.shadow' version '1.2.4'
	//Checks for RestActions
	//aka did you queue but harsh
	id 'com.sedmelluq.jdaction' version '1.0.1'
	//Tell me when smth is outdated
	id 'com.github.ben-manes.versions' version '0.16.0'
}

//graphql
apply plugin: 'com.apollographql.android'

//Define the Main Class
mainClassName = "net.kodehawa.mantarobot.MantaroBot"

//Use an unified versioning system
def ver = new Version(major: 5, minor: 0, revision: "0a")
version ver.toString()

//We are going to use Java 8
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
    mavenCentral()
	maven { url 'https://jitpack.io' }
    maven { url "https://dl.bintray.com/kodehawa/maven" }
	maven { url 'https://dl.bintray.com/natanbc/maven' }
	mavenLocal()
}

dependencies {
	compile 'net.dv8tion:JDA:3.5.0_331'
	compile 'com.sedmelluq:lavaplayer:1.2.45'
	compile 'com.sedmelluq:jda-nas:1.0.6'

	compile 'org.reflections:reflections:0.9.11'
	compile 'ch.qos.logback:logback-classic:1.2.3'

	compile 'org.apache-extras.beanshell:bsh:2.0b6'

	compile 'us.monoid.web:resty:0.3.2'

	//Custom Commands 2.0 Support
	compile 'xyz.avarel.kaiper:Kaiper-Interpreter:1.1.0'
	//meme bc Kaiper got trolled by Bintray
	compile 'xyz.avarel.kaiper:Kaiper-AST:1.1.0'
	compile 'xyz.avarel.kaiper:Kaiper-Runtime-Lib:1.1.0'
	compile 'xyz.avarel.kaiper:Kaiper-Common:1.1.0'
	//(will be fixed in next version)

	compile 'br.com.brjdevs:utils:1.0.0_15'
	compile 'br.com.brjdevs:network:1.0.0_2'
	compile 'br.com.brjdevs:trove-utils:1.0.0_4'

	compile 'com.google.guava:guava:23.6-jre'
	compile 'com.google.code.gson:gson:2.8.2'
	compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.4'

	compile 'com.rethinkdb:rethinkdb-driver:2.3.3'
	compile 'org.redisson:redisson:3.5.3' //don't update this one unless needed, it just threw deprecation warnings everywhere.
	compile 'io.sentry:sentry:1.2.0'

	compile 'net.jodah:expiringmap:0.5.8'
	compile 'org.apache.commons:commons-lang3:3.6'

    compile fileTree(dir: 'lib', include: '*.jar')
    compile 'net.kodehawa:imageboard-api:2.0.3_2'
	compile 'com.github.natanbc:discordbots-api:1.4.2'

    compileOnly "org.projectlombok:lombok:1.16.20"
	compile 'com.datadoghq:java-dogstatsd-client:2.5'

	compile 'com.github.natanbc:java-eval:1.0'

	//Basically for FinderUtil
	compile 'com.jagrosh:JDA-Utilities:1.9'

	compile 'com.github.natanbc:usage-tracker:0.1.1'

    compile 'com.apollographql.apollo:apollo-runtime:0.4.4'
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.6'
}

tasks.withType(JavaCompile) {
	options.compilerArgs <<
            "-Xlint:deprecation" <<
            "-Xlint:unchecked" <<
            "-Xlint:divzero" <<
            "-Xlint:cast" <<
            "-Xlint:empty" <<
            "-Xlint:fallthrough" <<
            "-Xlint:finally" <<
            "-Xlint:overrides"
	options.encoding = 'UTF-8'
}

compileJava.dependsOn.remove(generateApolloClasses)

clean {
    delete = []
    def file = new File("build")
    if(file.listFiles() != null) {
        file.listFiles().each {
            if(it.name == "generated") {
                if(it.listFiles() != null) {
                    it.listFiles().each {
                        if(it.name == "source") {
                            if(it.listFiles() != null) {
                                it.listFiles().each {
                                    if(it.name != "apollo") {
                                        delete it.name
                                    }
                                }
                            }
                        } else {
                            delete it.name
                        }
                    }
                }
            } else {
                delete it.name
            }
        }
    }
}

//Task for the versioning system
task prepareSource(type: Copy) {
	from 'src/main/java'
    from 'build/generated/source/apollo/'
	into 'build/prepared-src'
	filter(ReplaceTokens, tokens: [
		version: ver.toString()
	])
	dependsOn clean
}
prepareSource.dependsOn clean

compileJava {
	source = prepareSource.destinationDir
	classpath = sourceSets.main.compileClasspath
	options.encoding = 'UTF-8'
	dependsOn prepareSource
}

build.dependsOn shadowJar

artifacts {
	archives shadowJar
}

task cleanDistTar(type: Delete) { delete files(distTar) }
distTar { classifier = "trash" }
distTar.finalizedBy cleanDistTar

task cleanDistZip(type: Delete) { delete files(distZip) }
distZip { classifier = "trash" }
distZip.finalizedBy cleanDistZip

task cleanUnshadedJar(type: Delete) { delete files(jar) }
jar { classifier = "trash" }
jar.finalizedBy cleanUnshadedJar

shadowJar {
	classifier = ""
}

class Version {
	String major, minor, revision

	String toString() {
		"${major}.${minor}.${revision}"
	}
}
