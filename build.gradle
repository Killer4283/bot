/*
 * Copyright (C) 2016 Kodehawa
 *
 * Mantaro is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * Mantaro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Mantaro. If not, see http://www.gnu.org/licenses/
 *
 */

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

mainClassName = "net.kodehawa.mantarobot.MantaroBot"
def ver = new Version(major: 8, minor: 0, revision: 3)
version ver.toString()

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

repositories {
    mavenCentral()
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }

    maven {
        url 'https://jitpack.io'
    }

    maven {
        url "https://maven.topi.wtf/releases"
    }
}

task generateLanguageList {
    doLast {
        def out = new PrintStream(new FileOutputStream(new File(project.rootDir, "src/main/resources/assets/languages/list.txt")))
        new File(project.rootDir, "src/main/resources/assets/languages").listFiles().each {
            if (it.getName().endsWith("json")) {
                out.println(it.getName())
            }
        }

        out.close()
    }
}

dependencies {
    // Base
    implementation 'net.dv8tion:JDA:5.0.0-beta.13'
    implementation 'club.minnced:discord-webhooks:0.8.4'

    // Music
    implementation ('com.github.freyacodes:Lavalink-Client:5fe1b90ab5') {
        exclude group: 'com.sedmelluq', module: 'lavaplayer'
    } // Lavalink-Client includes LP, but we specify it below, so we need to exclude it.
    implementation 'com.github.walkyst:lavaplayer-fork:1.4.3'
    implementation "com.github.TopiSenpai.LavaSrc:lavasrc:3.2.9"

    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    // Core
    implementation 'io.github.classgraph:classgraph:4.8.162'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    implementation 'com.google.guava:guava:32.1.2-jre'
    implementation 'commons-io:commons-io:2.13.0'
    implementation 'org.java-websocket:Java-WebSocket:1.5.4'

    // Database
    implementation 'org.mongodb:mongodb-driver-sync:4.10.2'
    implementation 'redis.clients:jedis:5.0.0'

    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'com.github.Kodehawa:imageboard-api:2.6.0'

    // Prometheus
    implementation 'io.prometheus:simpleclient:0.9.0'
    implementation 'io.prometheus:simpleclient_hotspot:0.9.0'
    implementation 'io.prometheus:simpleclient_httpserver:0.9.0'

    //Unit tests
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

// Damned Gradle 8
compileJava.dependsOn generateLanguageList
distZip.dependsOn shadowJar
distTar.dependsOn shadowJar
startScripts.dependsOn shadowJar
startShadowScripts.dependsOn jar

test.dependsOn generateLanguageList

task ci {
    dependsOn shadowJar
}

def lint = [
        "auxiliaryclass",
        "cast",
        "classfile",
        "deprecation",
        "dep-ann",
        "divzero",
        "empty",
        "exports",
        "fallthrough",
        "finally",
        "module",
        "opens",
        "options",
        "overloads",
        "overrides",
        "path",
        // removed because of "No processor claimed any of these annotations: ..."
        //"processing",
        "rawtypes",
        "removal",
        "requires-automatic",
        "requires-transitive-automatic",
        // removed because "non-transient instance field of a serializable class declared with a non-serializable type", believe me i know
        //"serial",
        "static",
        "try",
        "unchecked",
        "varargs",
        "preview"
]

import org.apache.tools.ant.filters.ReplaceTokens

def gitRevision() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }

    return gitVersion.toString().trim()
}

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/MantaroInfo.java'
        filter(ReplaceTokens, tokens: [
                version: ver.toString(),
                revision: gitRevision().toString()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'MantaroInfo.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source
    classpath = sourceSets.main.compileClasspath
    //options.compilerArgs += ["-Xlint:${lint.join(",")}", "-Werror"]
    options.compilerArgs += ["-Xlint:${lint.join(",")}"]

    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

build.dependsOn shadowJar

shadowJar {
    archiveClassifier.set(null)
    exclude 'module-info.class'
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}.${revision}"
    }
}
